package sm;

public class SMTree {

	//Raiz da arvore - meta g0
	No raiz;

	//Construtor seta a raiz
	public SMTree(int valor){
		this.raiz = new No(valor); 
	}

	//inserir em um no um valor
	public void inserir_novo(int local, int valor){
		this.buscar_no_inserir(this.raiz, local, valor);
	}

	//buscar um no com valor
	public void buscar_um_no(int local){
		buscar_no(this.raiz, local);
	}



	protected No buscar_no(No no,int local){
		No buscado = null;
		if(no.valor == local){
			System.out.println("NO ENCONTRADO: "+ no.valor);
			System.out.println("PAI: "+ no.pai.valor);
			buscado = no;

		}else 
		{	
			if(no.esquerda != null){
				buscar_no(no.esquerda, local);
			}
			if(no.direita != null){
				buscar_no(no.direita, local);
			}
		}	
		return buscado;
	}

	protected void buscar_no_inserir(No no, int local, int valor){
		if(no.valor == local){
			this.inserir(no,local,valor);
		}else 
		{	
			if(no.esquerda != null){
				buscar_no_inserir(no.esquerda, local, valor);
			}
			if(no.direita != null){
				buscar_no_inserir(no.direita, local, valor);
			}
		}		
	}

	protected void inserir(No no, int local,  int valor) {

		if(no.esquerda == null){
			
			no.esquerda = new No(valor);
			no.esquerda.pai = no;

		}else if(no.direita == null){

			no.direita = new No(valor);
			no.direita.pai = no;

		}else if(no.direita.generico == true){

			No temp = no.direita;
			No gr = new No();//Criacao do no generico
			gr.pai = no;
			gr.esquerda = temp;
			gr.esquerda.pai = gr;
			gr.direita = new No(valor);
			gr.direita.pai = gr;
			no.direita = gr;


		}else if(no.direita.generico == false){

			inserir(no.direita, local, valor);
		}

	}


	public void show( int level, No no){

		System.out.print(no.valor);

		System.out.print("\n");
		level++;


		if(no.esquerda != null){

			System.out.print("(NIVEL"+level + " - ESQ)\t");
			show(level, no.esquerda);


		}
		if(no.direita != null){
			System.out.print("(NIVEL"+level + " - DIR)\t");


			show(level, no.direita);

		}


	}

	public No getRaiz() {
		return raiz;
	}

	private static void show2(int level, int maxlevel, No no){
		for(int i = 0;i <= maxlevel - level; i++){
			System.out.print("\t");
		}
		System.out.print(no.valor);
		System.out.print("\n");

		level++;

		for(int i = 0;i <= maxlevel - level; i++){
			System.out.print("\t");
		}    	

		System.out.print(no.esquerda.valor);

		for(int i = 0;i <= maxlevel - level; i++){
			System.out.print("\t");
		}

		System.out.print(no.direita.valor);



	}

	public static void printNode(No raiz) {
		int maxLevel = maxLevel(raiz);
		int level = 0;

		System.out.println("MAX LEVEL:" + maxLevel);

		int floor = maxLevel - level;
		int endgeLines = (int) Math.pow(2, (Math.max(floor - 1, 0)));
		int firstSpaces = (int) Math.pow(2, (floor)) - 1;
		int betweenSpaces = (int) Math.pow(2, (floor + 1)) - 1;

		show2(level, maxLevel, raiz);

	}

	private static int maxLevel(No no) {
		if (no == null)
			return 0;

		return Math.max(maxLevel(no.esquerda), maxLevel(no.direita)) + 1;
	}



	private static void printWhitespaces(int count) {
		for (int i = 0; i < count; i++)
			System.out.print(" ");
	}

}
